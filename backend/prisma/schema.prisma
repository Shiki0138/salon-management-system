// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// テナント（店舗）
model Tenant {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  plan        String   @default("basic") // basic, premium, enterprise
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staff        Staff[]
  customers    Customer[]
  threads      MessageThread[]
  reservations Reservation[]
  templates    Template[]
  auditLogs    AuditLog[]
  settings     TenantSetting[]
  tags         Tag[]

  @@map("tenants")
}

// テナント設定
model TenantSetting {
  id       String @id @default(cuid())
  tenantId String
  key      String
  value    String
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

// スタッフ
model Staff {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  name         String
  role         StaffRole @default(STAFF)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  tenantId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  tenant                  Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedThreads         MessageThread[] @relation("AssignedStaff")
  sentMessages            Message[]
  handledReservations     Reservation[]   @relation("HandledBy")
  createdTemplates        Template[]
  auditLogs               AuditLog[]

  @@map("staff")
}

enum StaffRole {
  ADMIN
  MANAGER
  STAFF
}

// 顧客
model Customer {
  id              String    @id @default(cuid())
  name            String?
  nameKana        String?
  gender          Gender?
  birthDate       DateTime?
  phone           String?
  email           String?
  address         String?
  instagramId     String?   @unique
  lineId          String?   @unique
  firstVisitDate  DateTime?
  lastVisitDate   DateTime?
  visitCount      Int       @default(0)
  notes           String?
  tenantId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  threads      MessageThread[]
  reservations Reservation[]
  customerTags CustomerTag[]

  @@map("customers")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// タグ
model Tag {
  id          String @id @default(cuid())
  name        String
  color       String @default("#3B82F6")
  type        TagType
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerTags CustomerTag[]
  threadTags   ThreadTag[]

  @@unique([tenantId, name, type])
  @@map("tags")
}

enum TagType {
  CUSTOMER
  THREAD
}

// 顧客タグの中間テーブル
model CustomerTag {
  customerId String
  tagId      String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([customerId, tagId])
  @@map("customer_tags")
}

// メッセージスレッド
model MessageThread {
  id                String            @id @default(cuid())
  customerId        String?
  channel           MessageChannel
  channelThreadId   String            // Instagram thread ID or LINE user ID
  assignedStaffId   String?
  status            ThreadStatus      @default(OPEN)
  tenantId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer      Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  assignedStaff Staff?      @relation("AssignedStaff", fields: [assignedStaffId], references: [id], onDelete: SetNull)
  messages      Message[]
  threadTags    ThreadTag[]

  @@unique([tenantId, channel, channelThreadId])
  @@map("message_threads")
}

enum MessageChannel {
  INSTAGRAM
  LINE
}

enum ThreadStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

// スレッドタグの中間テーブル
model ThreadTag {
  threadId  String
  tagId     String
  createdAt DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag    Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([threadId, tagId])
  @@map("thread_tags")
}

// メッセージ
model Message {
  id           String      @id @default(cuid())
  threadId     String
  senderId     String?     // Staff ID if sent by staff, null if sent by customer
  senderType   SenderType
  content      String
  mediaType    MediaType   @default(TEXT)
  mediaUrl     String?
  externalId   String?     // External platform message ID
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())

  // Relations
  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender Staff?        @relation(fields: [senderId], references: [id], onDelete: SetNull)

  @@map("messages")
}

enum SenderType {
  CUSTOMER
  STAFF
}

enum MediaType {
  TEXT
  IMAGE
  STICKER
  FILE
}

// 予約
model Reservation {
  id            String            @id @default(cuid())
  startTime     DateTime
  endTime       DateTime?
  menuContent   String?
  customerName  String?           // Hot Pepper などの場合、Customer と紐付かない場合もある
  customerId    String?
  customerPhone String?
  customerEmail String?
  staffId       String?
  source        ReservationSource
  sourceId      String?           // External system ID
  status        ReservationStatus @default(CONFIRMED)
  notes         String?
  tenantId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  staff    Staff?    @relation("HandledBy", fields: [staffId], references: [id], onDelete: SetNull)

  @@map("reservations")
}

enum ReservationSource {
  HOTPEPPER
  GOOGLE_CALENDAR
  PHONE
  WALK_IN
  MANUAL
}

enum ReservationStatus {
  TENTATIVE
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// テンプレート
model Template {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  createdById String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy Staff  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("templates")
}

// 監査ログ
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  description String?
  staffId     String?
  ipAddress   String?
  userAgent   String?
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff  Staff? @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}