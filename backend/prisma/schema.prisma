// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// テナント（店舗）
model Tenant {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  plan        String   @default("basic") // basic, premium, enterprise
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staff        Staff[]
  customers    Customer[]
  threads      MessageThread[]
  reservations Reservation[]
  templates    Template[]
  auditLogs    AuditLog[]
  settings     TenantSetting[]
  tags         Tag[]
  autoMessageTemplates AutoMessageTemplate[]
  autoMessageLogs      AutoMessageLog[]
  menus                Menu[]
  menuCategories       MenuCategory[]
  menuHistory          MenuHistory[]
  recommendations      MenuRecommendation[]
  notifications        Notification[]
  analyticsMetrics     AnalyticsMetric[]
  predictionData       PredictionData[]
  customerBehaviors    CustomerBehavior[]
  loginHistory         LoginHistory[]
  securityEvents       SecurityEvent[]

  @@map("tenants")
}

// テナント設定
model TenantSetting {
  id       String @id @default(cuid())
  tenantId String
  key      String
  value    String
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

// スタッフ
model Staff {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String
  name         String
  role         String    @default("STAFF") // ADMIN, MANAGER, STAFF
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  tenantId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // 2FA関連
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String? // JSON配列形式
  
  // セッション管理
  refreshTokens    RefreshToken[]
  
  // セキュリティ
  loginAttempts    Int      @default(0)
  lockedUntil      DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Relations
  tenant                  Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedThreads         MessageThread[] @relation("AssignedStaff")
  sentMessages            Message[]
  handledReservations     Reservation[]   @relation("HandledBy")
  createdTemplates        Template[]
  auditLogs               AuditLog[]
  notifications           Notification[]
  loginHistory            LoginHistory[] @relation("LoginHistory")
  securityEvents          SecurityEvent[] @relation("SecurityEvents")

  @@map("staff")
}

// enum StaffRole {
//   ADMIN
//   MANAGER
//   STAFF
// }
// SQLite doesn't support enums, using String instead

// 顧客
model Customer {
  id              String    @id @default(cuid())
  name            String?
  nameKana        String?
  gender          String? // MALE, FEMALE, OTHER
  birthDate       DateTime?
  phone           String?
  email           String?
  address         String?
  instagramId     String?   @unique
  lineId          String?   @unique
  firstVisitDate  DateTime?
  lastVisitDate   DateTime?
  visitCount      Int       @default(0)
  notes           String?
  tenantId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  threads      MessageThread[]
  reservations Reservation[]
  customerTags CustomerTag[]
  autoMessageLogs AutoMessageLog[]
  menuHistory  MenuHistory[]
  recommendations MenuRecommendation[]
  notifications Notification[]
  customerBehavior CustomerBehavior?

  @@map("customers")
}

// enum Gender {
//   MALE
//   FEMALE
//   OTHER
// }
// SQLite doesn't support enums, using String instead

// タグ
model Tag {
  id          String @id @default(cuid())
  name        String
  color       String @default("#3B82F6")
  type        String // CUSTOMER, THREAD
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerTags CustomerTag[]
  threadTags   ThreadTag[]

  @@unique([tenantId, name, type])
  @@map("tags")
}

// enum TagType {
//   CUSTOMER
//   THREAD
// }
// SQLite doesn't support enums, using String instead

// 顧客タグの中間テーブル
model CustomerTag {
  customerId String
  tagId      String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([customerId, tagId])
  @@map("customer_tags")
}

// メッセージスレッド
model MessageThread {
  id                String            @id @default(cuid())
  customerId        String?
  channel           String // INSTAGRAM, LINE
  channelThreadId   String            // Instagram thread ID or LINE user ID
  assignedStaffId   String?
  status            String            @default("OPEN") // OPEN, IN_PROGRESS, CLOSED
  tenantId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer      Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  assignedStaff Staff?      @relation("AssignedStaff", fields: [assignedStaffId], references: [id], onDelete: SetNull)
  messages      Message[]
  threadTags    ThreadTag[]

  @@unique([tenantId, channel, channelThreadId])
  @@map("message_threads")
}

// enum MessageChannel {
//   INSTAGRAM
//   LINE
// }
// enum ThreadStatus {
//   OPEN
//   IN_PROGRESS
//   CLOSED
// }
// SQLite doesn't support enums, using String instead

// スレッドタグの中間テーブル
model ThreadTag {
  threadId  String
  tagId     String
  createdAt DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag    Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([threadId, tagId])
  @@map("thread_tags")
}

// メッセージ
model Message {
  id           String      @id @default(cuid())
  threadId     String
  senderId     String?     // Staff ID if sent by staff, null if sent by customer
  senderType   String // CUSTOMER, STAFF
  content      String
  mediaType    String      @default("TEXT") // TEXT, IMAGE, STICKER, FILE
  mediaUrl     String?
  externalId   String?     // External platform message ID
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())

  // Relations
  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender Staff?        @relation(fields: [senderId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// enum SenderType {
//   CUSTOMER
//   STAFF
// }
// enum MediaType {
//   TEXT
//   IMAGE
//   STICKER
//   FILE
// }
// SQLite doesn't support enums, using String instead

// 予約
model Reservation {
  id            String            @id @default(cuid())
  startTime     DateTime
  endTime       DateTime?
  menuContent   String?
  customerName  String?           // Hot Pepper などの場合、Customer と紐付かない場合もある
  customerId    String?
  customerPhone String?
  customerEmail String?
  staffId       String?
  source        String // HOTPEPPER, GOOGLE_CALENDAR, PHONE, WALK_IN, MANUAL
  sourceId      String?           // External system ID
  status        String            @default("CONFIRMED") // TENTATIVE, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  notes         String?
  tenantId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  nextVisitDate     DateTime?
  reminderSentAt    DateTime?
  followUpSentAt    DateTime?

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  staff    Staff?    @relation("HandledBy", fields: [staffId], references: [id], onDelete: SetNull)
  autoMessageLogs AutoMessageLog[]

  @@map("reservations")
}

// enum ReservationSource {
//   HOTPEPPER
//   GOOGLE_CALENDAR
//   PHONE
//   WALK_IN
//   MANUAL
// }
// enum ReservationStatus {
//   TENTATIVE
//   CONFIRMED
//   COMPLETED
//   CANCELLED
//   NO_SHOW
// }
// SQLite doesn't support enums, using String instead

// テンプレート
model Template {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  createdById String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy Staff  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("templates")
}

// 監査ログ
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  description String?
  staffId     String?
  ipAddress   String?
  userAgent   String?
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff  Staff? @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// 自動メッセージテンプレート
model AutoMessageTemplate {
  id          String   @id @default(cuid())
  type        String   // REMINDER_1_WEEK, REMINDER_3_DAYS, FOLLOWUP_VISIT
  title       String
  content     String
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, type])
  @@map("auto_message_templates")
}

// 自動メッセージ送信ログ
model AutoMessageLog {
  id              String   @id @default(cuid())
  reservationId   String?
  customerId      String
  templateType    String   // REMINDER_1_WEEK, REMINDER_3_DAYS, FOLLOWUP_VISIT
  channel         String   // LINE, INSTAGRAM, EMAIL
  messageContent  String
  status          String   // SENT, FAILED, SCHEDULED
  sentAt          DateTime?
  errorMessage    String?
  tenantId        String
  createdAt       DateTime @default(now())

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)

  @@map("auto_message_logs")
}

// メニューカテゴリー
model MenuCategory {
  id          String   @id @default(cuid())
  name        String
  displayOrder Int     @default(0)
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  menus  Menu[]

  @@unique([tenantId, name])
  @@map("menu_categories")
}

// メニュー
model Menu {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Int      // 円単位
  duration     Int      // 分単位
  categoryId   String
  isActive     Boolean  @default(true)
  displayOrder Int      @default(0)
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // AI推奨用データ
  popularity     Int @default(0) // 人気度スコア
  seasonality    String? // SPRING, SUMMER, AUTUMN, WINTER, ALL
  ageGroup       String? // TEENS, TWENTIES, THIRTIES, FORTIES_PLUS, ALL
  genderTarget   String? // MALE, FEMALE, ALL

  // Relations
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category       MenuCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  menuHistory    MenuHistory[]
  recommendations MenuRecommendation[]

  @@map("menus")
}

// 顧客メニュー履歴
model MenuHistory {
  id          String   @id @default(cuid())
  customerId  String
  menuId      String
  visitDate   DateTime
  satisfaction Int?    // 1-5 満足度スコア
  notes       String?
  tenantId    String
  createdAt   DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  menu     Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("menu_history")
}

// AIメニュー推奨
model MenuRecommendation {
  id         String   @id @default(cuid())
  customerId String
  menuId     String
  tenantId   String
  score      Float    // 0.0-1.0 推奨スコア
  reasoning  String   // 推奨理由
  factors    String   // JSON形式で推奨要因データ
  createdAt  DateTime @default(now())
  expiresAt  DateTime // 推奨の有効期限

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  menu     Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("menu_recommendations")
}

// 通知
model Notification {
  id         String   @id @default(cuid())
  type       String   // NEW_MESSAGE, RESERVATION_CHANGE, URGENT_ALERT, SYSTEM_NOTIFICATION
  title      String
  message    String
  tenantId   String
  staffId    String?
  customerId String?
  metadata   String?  // JSON形式でメタデータ保存
  priority   String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  isRead     Boolean  @default(false)
  readAt     DateTime?
  createdAt  DateTime @default(now())

  // Relations
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff    Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([tenantId, isRead])
  @@index([staffId, isRead])
  @@map("notifications")
}

// 分析メトリクス
model AnalyticsMetric {
  id        String   @id @default(cuid())
  tenantId  String
  metricKey String   // revenue_daily, customers_new, reservations_count, etc.
  value     Float
  date      DateTime
  metadata  String?  // JSON形式で詳細データ
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, metricKey, date])
  @@index([tenantId, metricKey])
  @@index([date])
  @@map("analytics_metrics")
}

// 予測データ
model PredictionData {
  id           String   @id @default(cuid())
  tenantId     String
  predictionType String // revenue_forecast, customer_churn, demand_forecast
  targetDate   DateTime
  predictedValue Float
  confidence   Float    // 0.0-1.0 信頼度
  actualValue  Float?   // 後から実績値を記録
  features     String   // JSON形式で予測に使用した特徴量
  modelVersion String   @default("v1.0")
  createdAt    DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, predictionType, targetDate, modelVersion])
  @@index([tenantId, predictionType])
  @@index([targetDate])
  @@map("prediction_data")
}

// 顧客行動分析
model CustomerBehavior {
  id                String   @id @default(cuid())
  customerId        String
  tenantId          String
  lastVisitDate     DateTime?
  visitFrequency    Float?   // 平均来店間隔（日）
  averageSpending   Float?   // 平均客単価
  preferredTimeSlot String?  // 好みの時間帯
  churnProbability  Float?   // 0.0-1.0 離脱確率
  lifetimeValue     Float?   // 顧客生涯価値
  riskScore         Float?   // 0.0-1.0 リスクスコア
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([customerId])
  @@index([tenantId, churnProbability])
  @@index([tenantId, lifetimeValue])
  @@map("customer_behaviors")
}

// リフレッシュトークン
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  staffId   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  
  // デバイス情報
  userAgent String?
  ipAddress String?
  
  // Relations
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// ログイン履歴
model LoginHistory {
  id         String   @id @default(cuid())
  staffId    String?
  tenantId   String
  email      String
  success    Boolean
  ipAddress  String?
  userAgent  String?
  failReason String?
  createdAt  DateTime @default(now())
  
  // Relations
  staff  Staff?  @relation("LoginHistory", fields: [staffId], references: [id], onDelete: SetNull)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([staffId])
  @@index([tenantId, createdAt])
  @@map("login_history")
}

// セキュリティイベント
model SecurityEvent {
  id          String   @id @default(cuid())
  tenantId    String
  staffId     String?
  eventType   String   // LOGIN_FAILED, ACCOUNT_LOCKED, PASSWORD_RESET, 2FA_ENABLED, etc.
  description String
  ipAddress   String?
  userAgent   String?
  metadata    String?  // JSON形式
  severity    String   @default("INFO") // INFO, WARNING, CRITICAL
  createdAt   DateTime @default(now())
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  staff  Staff? @relation("SecurityEvents", fields: [staffId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, severity])
  @@index([eventType])
  @@map("security_events")
}

