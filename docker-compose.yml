version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: salon_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: salon_management
      POSTGRES_USER: salon_user
      POSTGRES_PASSWORD: salon_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - salon_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salon_user -d salon_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: salon_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - salon_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: salon_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://salon_user:salon_password@postgres:5432/salon_management
      REDIS_URL: redis://redis:6379
      PORT: 4002
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-make-it-long-and-random}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production-make-it-different}
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this-in-production-for-2fa-setup}
      ACCESS_TOKEN_EXPIRY: 15m
      REFRESH_TOKEN_EXPIRY: 7d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "4002:4002"
    networks:
      - salon_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: salon_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - salon_network
    depends_on:
      - backend

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: salon_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@salon.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - salon_network
    depends_on:
      - postgres
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  salon_network:
    driver: bridge